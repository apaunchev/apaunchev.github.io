// Set a fully-formed type style. Line-height code thanks to @redclov3r (twitter.com/redclov3r/status/250301539321798657).
@mixin font-size($font-size, $line-height: true) {
	font-size: $font-size;
	font-size: ($font-size/$base-font-size)*1rem;
	@if $line-height == true {
		line-height: ceil($font-size/$base-line-height) * ($base-line-height/$font-size);
	}
}


// Create vendor-prefixed CSS in one go.
@mixin vendor($property, $value...) {
	-webkit-#{$property}: $value;
	-moz-#{$property}: $value;
	-ms-#{$property}: $value;
	-o-#{$property}: $value;
	#{$property}: $value;
}


// Media query for targetting retina devices.
@mixin image-2x($image, $width, $height) {
	@media (min--moz-device-pixel-ratio: 1.3),
		(-o-min-device-pixel-ratio: 2.6/2),
		(-webkit-min-device-pixel-ratio: 1.3),
		(min-device-pixel-ratio: 1.3),
		(min-resolution: 1.3dppx) {
		background-image: url($image);
		background-size: $width $height;
	}
}


// Set border radius.
@mixin border-radius($radius) {
	border-radius: $radius;
	// Stop background colour from leaking outside the border:
	background-clip: padding-box;
}


// Truncate text.
@mixin text-truncate {
	overflow: hidden;
	text-overflow: ellipsis;
	white-space: nowrap;
}


// Control opacity.
@mixin opacity($opacity) {
	opacity: $opacity;
	$opacity-ie: $opacity * 100;
	filter: alpha(opacity=$opacity-ie);
}


// Hide content off-screen without resorting to `display: none;`.
@mixin accessibility {
	border: 0 !important;
	clip: rect(0 0 0 0) !important;
	height: 1px !important;
	margin: -1px !important;
	overflow: hidden !important;
	padding: 0 !important;
	position: absolute !important;
	width: 1px !important;
}


// Media query mixin.
$palm-end: $lap-start - 1px;
$lap-end:  $desk-start - 1px;

@mixin media-query($media-query) {
	@if $media-query == palm {
		@media only screen and (max-width: $palm-end) { @content; }
	}

	@if $media-query == lap {
		@media only screen and (min-width: $lap-start) and (max-width: $lap-end) { @content; }
	}

	@if $media-query == lap-and-up {
		@media only screen and (min-width: $lap-start) { @content; }
	}

	@if $media-query == portable {
		@media only screen and (max-width: $lap-end) { @content; }
	}

	@if $media-query == desk {
		@media only screen and (min-width: $desk-start) { @content; }
	}

	@if $media-query == desk-wide {
		@media only screen and (min-width: $desk-wide-start) { @content; }
	}
}


// Generate grid widths and their breakpoint-specific variations.
@mixin grid-setup($namespace: "") {
	// Whole
	.#{$namespace}one-whole         { width: 100%; }


	// Halves
	.#{$namespace}one-half          { width: 50%; }


	// Thirds
	.#{$namespace}one-third         { width: 33.333%; }
	.#{$namespace}two-thirds        { width: 66.666%; }


	// Quarters
	.#{$namespace}one-quarter       { width: 25%; }
	.#{$namespace}two-quarters      { @extend .#{$namespace}one-half; }
	.#{$namespace}three-quarters    { width: 75%; }


	// Fifths
	.#{$namespace}one-fifth         { width: 20%; }
	.#{$namespace}two-fifths        { width: 40%; }
	.#{$namespace}three-fifths      { width: 60%; }
	.#{$namespace}four-fifths       { width: 80%; }


	// Sixths
	.#{$namespace}one-sixth         { width: 16.666%; }
	.#{$namespace}two-sixths        { @extend .#{$namespace}one-third; }
	.#{$namespace}three-sixths      { @extend .#{$namespace}one-half; }
	.#{$namespace}four-sixths       { @extend .#{$namespace}two-thirds; }
	.#{$namespace}five-sixths       { width: 83.333%; }


	// Eighths
	.#{$namespace}one-eighth        { width: 12.5%; }
	.#{$namespace}two-eighths       { @extend .#{$namespace}one-quarter; }
	.#{$namespace}three-eighths     { width: 37.5%; }
	.#{$namespace}four-eighths      { @extend .#{$namespace}one-half; }
	.#{$namespace}five-eighths      { width: 62.5%; }
	.#{$namespace}six-eighths       { @extend .#{$namespace}three-quarters; }
	.#{$namespace}seven-eighths     { width: 87.5%; }


	// Tenths
	.#{$namespace}one-tenth         { width: 10%; }
	.#{$namespace}two-tenths        { @extend .#{$namespace}one-fifth; }
	.#{$namespace}three-tenths      { width: 30%; }
	.#{$namespace}four-tenths       { @extend .#{$namespace}two-fifths; }
	.#{$namespace}five-tenths       { @extend .#{$namespace}one-half; }
	.#{$namespace}six-tenths        { @extend .#{$namespace}three-fifths; }
	.#{$namespace}seven-tenths      { width: 70%; }
	.#{$namespace}eight-tenths      { @extend .#{$namespace}four-fifths; }
	.#{$namespace}nine-tenths       { width: 90%; }


	// Twelfths
	.#{$namespace}one-twelfth       { width: 8.333%; }
	.#{$namespace}two-twelfths      { @extend .#{$namespace}one-sixth; }
	.#{$namespace}three-twelfths    { @extend .#{$namespace}one-quarter; }
	.#{$namespace}four-twelfths     { @extend .#{$namespace}one-third; }
	.#{$namespace}five-twelfths     { width: 41.666% }
	.#{$namespace}six-twelfths      { @extend .#{$namespace}one-half; }
	.#{$namespace}seven-twelfths    { width: 58.333%; }
	.#{$namespace}eight-twelfths    { @extend .#{$namespace}two-thirds; }
	.#{$namespace}nine-twelfths     { @extend .#{$namespace}three-quarters; }
	.#{$namespace}ten-twelfths      { @extend .#{$namespace}five-sixths; }
	.#{$namespace}eleven-twelfths   { width: 91.666%; }
}
