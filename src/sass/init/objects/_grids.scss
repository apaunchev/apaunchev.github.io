@if $use-grids == true {
/*------------------------------------*\
	$GRIDS
\*------------------------------------*/
/**
 * Fluid and nestable grid system, e.g.:
 *
   <div class="grid">

       <div class="grid__item  one-third">
           <p>One third grid</p>
       </div><!--

    --><div class="grid__item  two-thirds">
           <p>Two thirds grid</p>
       </div><!--

    --><div class="grid__item  one-half">
           <p>One half grid</p>
       </div><!--

    --><div class="grid__item  one-quarter">
           <p>One quarter grid</p>
       </div><!--

    --><div class="grid__item  one-quarter">
           <p>One quarter grid</p>
       </div>

   </div>
 *
 * Demo: jsfiddle.net/inuitcss/CLYUC
 *
 */

// Grid wrapper
.grid {
	margin-left: -$base-spacing-unit;
	list-style: none;
	margin-bottom: 0;
}
	// Very infrequently occuring grid wrappers as children of grid wrappers.
	.grid > .grid {
		margin-left: 0;
	}

	.grid__item {
		display: inline-block;
		width: 100%;
		padding-left: $base-spacing-unit;
		vertical-align: top;
	}


/**
 * Reversed grids
 */
.grid--rev {
	@extend .grid;
	direction: rtl;
	text-align: right;
}

	.grid--rev > .grid__item {
		direction: ltr;
		text-align: left;
	}


/**
 * Gutterless grids have all the properties of regular grids, minus any spacing.
 */
.grid--full {
	@extend .grid;
	margin-left: 0;

	> .grid__item {
		padding-left: 0;
	}
}


/**
 * Centered grids align grid items centrally without needing to use push or pull
 * classes.
 */
.grid--center {
	@extend .grid;
	text-align: center;

	> .grid__item {
		text-align: left;
	}
}

/**
 * Sizes in human readable format.
 */
@include grid-setup();

@if $responsive == true {
	/**
	 * If you have set `$responsive` to 'true' in `_vars.scss` then you now have
	 * access to these classes. You can define at which breakpoint you'd like an
	 * element to be a certain size, e.g.:
	 *
	 * `<div class="g  one-quarter  lap-one-half  palm-one-whole"> ... </div>`
	 *
	 * This would create a `div` that, at 'desktop' sizes, takes up a quarter of the
	 * horizontal space, a half of that space at 'tablet' sizes, and goes full width
	 * at 'mobile' sizes.
	 *
	 * Demo: jsfiddle.net/inuitcss/WS4Ge
	 *
	 */
	@include media-query(palm) {
		@include grid-setup("palm-");
	}

	@include media-query(lap) {
		@include grid-setup("lap-");
	}

	@include media-query(lap-and-up) {
		@include grid-setup("lap-and-up-");
	}

	@include media-query(portable) {
		@include grid-setup("portable-");
	}

	@include media-query(desk) {
		@include grid-setup("desk-");
	}

	@if $responsive-extra == true {
		/**
		 * If you have set the additional `$responsive-extra` variable to 'true' in
		 * `_vars.scss` then you now have access to the following class available to
		 * accomodate much larger screen resolutions.
		 */
		@include media-query(desk-wide) {
			@include grid-setup("desk-wide-");
		}
	}
}
} // endif
